name: Build wireguard-vanity-key (manual, simple)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Tag/branch/commit (use "latest" for default branch)'
        required: false
        default: 'latest'
      go-version:
        description: 'Go version (>=1.16 for go install pkg@version)'
        required: false
        default: '1.21'
      target-os:
        description: 'Target OS (windows/linux/darwin)'
        required: false
        default: 'windows'
      target-arch:
        description: 'Target arch (amd64/arm64)'
        required: false
        default: 'amd64'
      output-name:
        description: 'Артефакт/имя файла'
        required: false
        default: 'wireguard-vanity-key.exe'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ inputs.go-version }}

      - name: Build via git clone + go build (recommended for cross builds)
        env:
          GOOS: ${{ inputs.target-os }}
          GOARCH: ${{ inputs.target-arch }}
          CGO_ENABLED: 0
        run: |
          set -e
          WORK=/tmp/wgvk-src
          rm -rf "$WORK"
          git clone --depth 1 https://github.com/AlexanderYastrebov/wireguard-vanity-key.git "$WORK"
          if [ "${{ inputs.version }}" != "latest" ] && [ -n "${{ inputs.version }}" ]; then
            cd "$WORK"
            git fetch --depth=1 origin "${{ inputs.version }}" || true
            git checkout "${{ inputs.version }}" || git checkout "tags/${{ inputs.version }}" || true
          fi
          cd "$WORK"
          OUT="$GITHUB_WORKSPACE/${{ inputs.output-name }}"
          # имя бинаря внутри модуля
          BIN_NAME="wireguard-vanity-key"
          if [ "${{ inputs.target-os }}" = "windows" ]; then BIN_NAME="${BIN_NAME}.exe"; fi
          go build -trimpath -o "$OUT" ./...
          # если build ./... не положил бинарь, попробуем явно build main
          if [ ! -f "$OUT" ]; then
            # попытаемся найти пакет main и собрать его
            mapfile -t mains < <(go list -f '{{if eq .Name "main"}}{{.Dir}}{{end}}' ./... | sed '/^$/d')
            for d in "${mains[@]}"; do
              go build -trimpath -o "$OUT" "$d" || true
              if [ -f "$OUT" ]; then break; fi
            done
          fi
          if [ ! -f "$OUT" ]; then
            echo "Build failed: no output binary found."
            ls -la
            exit 1
          fi
          ls -la "$OUT"

      - name: Prepare artifact
        run: |
          set -e
          mkdir -p "$GITHUB_WORKSPACE/artifact"
          # binary name (go install places the executable with module base name)
          BIN_NAME="wireguard-vanity-key"
          if [ "${{ inputs.target-os }}" = "windows" ]; then
            BIN_NAME="${BIN_NAME}.exe"
          fi
          cp "$GITHUB_WORKSPACE/bin/${BIN_NAME}" "$GITHUB_WORKSPACE/${{ inputs.output-name }}"

      - name: Upload artifact (click to download)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.output-name }}
          path: ${{ inputs.output-name }}
